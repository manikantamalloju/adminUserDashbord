{"ast":null,"code":"function __extends(d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nvar BaseLevel = function () {\n  function BaseLevel() {}\n  /**\n   * Build the notification\n   *\n   * @param {any}    options [description]\n   * @param {string} title   [description]\n   * @param {string} body    [description]\n   */\n  BaseLevel.prototype.buildNotification = function (options, type, title, body) {\n    if (body === void 0) {\n      body = null;\n    }\n    var notification = document.createElement('div');\n    notification.classList.add('toastify');\n    notification.classList.add(\"toastify-\" + options.position);\n    notification.classList.add(\"toastify-\" + type);\n    var notificationContent = document.createElement('div');\n    notificationContent.classList.add('toastify-content');\n    var titleArea = document.createElement('span');\n    titleArea.classList.add('toastify-title');\n    titleArea.innerHTML = title;\n    var bodyArea = document.createElement('span');\n    bodyArea.classList.add('toastify-content');\n    bodyArea.innerHTML = body;\n    var cancelIcon = document.createElement('span');\n    cancelIcon.classList.add('toastify-cancel-icon');\n    cancelIcon.innerHTML = '&#x2716;';\n    notificationContent.appendChild(titleArea);\n    if (body) {\n      notificationContent.appendChild(bodyArea);\n    }\n    notificationContent.appendChild(cancelIcon);\n    notification.appendChild(notificationContent);\n    return notification;\n  };\n  /**\n   * Show the notification\n   *\n   * @param {HTMLElement} notification [description]\n   * @param {any}         options      [description]\n   */\n  BaseLevel.prototype.showNotification = function (notification, options) {\n    var _this = this;\n    var target = this.getTarget(options);\n    target.appendChild(notification);\n    this.fadeIn(notification, options.speed).then(function () {\n      _this.setUpEventListener(notification, options);\n      setTimeout(function () {\n        _this.hideNotification(notification, options);\n      }, options.delay);\n    });\n  };\n  /**\n   * Hide the notification item\n   *\n   * @param {HTMLElement} notification [description]\n   * @param {any} options [description]\n   */\n  BaseLevel.prototype.hideNotification = function (notification, options) {\n    this.fadeOut(notification, options.speed).then(function () {\n      notification.parentNode.removeChild(notification);\n    });\n  };\n  /**\n   * Set up the event listener\n   * @param {HTMLElement} notification [description]\n   */\n  BaseLevel.prototype.setUpEventListener = function (notification, options) {\n    var element = notification.lastElementChild;\n    element.addEventListener('click', function closeIconClicked(event) {\n      event.preventDefault();\n      element.removeEventListener(\"click\", closeIconClicked, false);\n      this.hideNotification(notification, options);\n    }.bind(this));\n  };\n  /**\n   * Face the element out\n   *\n   * @param {HTMLElement} element\n   * @param {Number} speed\n   */\n  BaseLevel.prototype.fadeOut = function (element, speed) {\n    return new Promise(function (resolve, reject) {\n      var opacity = 1;\n      var timer = setInterval(function () {\n        if (opacity <= 0.1) {\n          clearInterval(timer);\n          element.style.display = 'none';\n          resolve();\n        }\n        element.style.opacity = opacity.toString();\n        element.style.filter = 'alpha(opacity=' + opacity * 100 + \")\";\n        opacity -= opacity * 0.1;\n      }, speed);\n    });\n  };\n  /**\n   * Face the element in\n   *\n   * @param {HTMLElement} element [description]\n   * @param {Number} speed [description]\n   */\n  BaseLevel.prototype.fadeIn = function (element, speed) {\n    return new Promise(function (resolve, reject) {\n      var opacity = 0;\n      var timer = setInterval(function () {\n        if (opacity > 1) {\n          clearInterval(timer);\n          resolve();\n        }\n        element.style.opacity = opacity.toString();\n        element.style.filter = 'alpha(opacity=' + opacity * 100 + \")\";\n        if (opacity === 0) {\n          opacity = 0.1;\n          return;\n        }\n        opacity += opacity * 0.1;\n      }, speed);\n    });\n  };\n  /**\n   * Get the target\n   *\n   * @param options\n   */\n  BaseLevel.prototype.getTarget = function (options) {\n    if (options.element !== 'body') {\n      return document.getElementById(options.element);\n    }\n    return document.body;\n  };\n  return BaseLevel;\n}();\nvar Success = new (function (_super) {\n  __extends(Success, _super);\n  function Success() {\n    _super.apply(this, arguments);\n  }\n  /**\n   * Fire the toaster notification\n   * @param {string} title [description]\n   * @param {string} body  [description]\n   * @param {any}    options\n   */\n  Success.prototype.fire = function (options, title, body) {\n    if (body === void 0) {\n      body = null;\n    }\n    var notification = this.buildNotification(options, 'success', title, body);\n    this.showNotification(notification, options);\n  };\n  return Success;\n}(BaseLevel))();\nvar Info = new (function (_super) {\n  __extends(Info, _super);\n  function Info() {\n    _super.apply(this, arguments);\n  }\n  /**\n   * Fire the toaster notification\n   *\n   * @param {string} title [description]\n   * @param {string} body  [description]\n   * @param {any}    options\n   */\n  Info.prototype.fire = function (options, title, body) {\n    if (body === void 0) {\n      body = null;\n    }\n    var notification = this.buildNotification(options, 'info', title, body);\n    this.showNotification(notification, options);\n  };\n  return Info;\n}(BaseLevel))();\nvar Warning = new (function (_super) {\n  __extends(Warning, _super);\n  function Warning() {\n    _super.apply(this, arguments);\n  }\n  /**\n   * Fire the toaster notification\n   *\n   * @param {string} title [description]\n   * @param {string} body  [description]\n   * @param {any}    options\n   */\n  Warning.prototype.fire = function (options, title, body) {\n    if (body === void 0) {\n      body = null;\n    }\n    var notification = this.buildNotification(options, 'warning', title, body);\n    this.showNotification(notification, options);\n  };\n  return Warning;\n}(BaseLevel))();\nvar Error = new (function (_super) {\n  __extends(Error, _super);\n  function Error() {\n    _super.apply(this, arguments);\n  }\n  /**\n   * Fire the toaster notification\n   *\n   * @param {string} title [description]\n   * @param {string} body  [description]\n   * @param {any}    options\n   */\n  Error.prototype.fire = function (options, title, body) {\n    if (body === void 0) {\n      body = null;\n    }\n    var notification = this.buildNotification(options, 'error', title, body);\n    this.showNotification(notification, options);\n  };\n  return Error;\n}(BaseLevel))();\nvar Default = new (function (_super) {\n  __extends(Default, _super);\n  function Default() {\n    _super.apply(this, arguments);\n  }\n  /**\n   * Fire the toaster notification\n   *\n   * @param {string} title [description]\n   * @param {string} body  [description]\n   * @param {any}    options\n   */\n  Default.prototype.fire = function (options, title, body) {\n    if (body === void 0) {\n      body = null;\n    }\n    var notification = this.buildNotification(options, 'default', title, body);\n    this.showNotification(notification, options);\n  };\n  return Default;\n}(BaseLevel))();\nvar Toastify = function () {\n  function Toastify() {\n    /**\n     * The different type of levels\n     * @type {object}\n     */\n    this.levels = {\n      success: Success,\n      info: Info,\n      warning: Warning,\n      error: Error,\n      default: Default\n    };\n    /**\n     * The configuration options\n     *\n     * @type {object}\n     */\n    this.options = {\n      position: 'bottom-right',\n      delay: 5000,\n      speed: 10,\n      element: 'body'\n    };\n  }\n  /**\n   * Set an option value\n   *\n   * @param {string} key   [description]\n   * @param {any}    value [description]\n   */\n  Toastify.prototype.setOption = function (key, value) {\n    if (this.options.hasOwnProperty(key)) {\n      this.options[key] = value;\n      return;\n    }\n    throw \"The option key \" + key + \" is not a valid option\";\n  };\n  /**\n   * Fire a success message\n   * @param {string}    title [description]\n   * @param {string =     null}        body [description]\n   */\n  Toastify.prototype.success = function (title, body) {\n    if (body === void 0) {\n      body = null;\n    }\n    this.levels.success.fire(this.options, title, body);\n  };\n  /**\n   * Fire an info message\n   * @param {string}    title [description]\n   * @param {string =     null}        body [description]\n   */\n  Toastify.prototype.info = function (title, body) {\n    if (body === void 0) {\n      body = null;\n    }\n    this.levels.info.fire(this.options, title, body);\n  };\n  /**\n   * Fire a warning message\n   * @param {string}    title [description]\n   * @param {string =     null}        body [description]\n   */\n  Toastify.prototype.warning = function (title, body) {\n    if (body === void 0) {\n      body = null;\n    }\n    this.levels.warning.fire(this.options, title, body);\n  };\n  /**\n   * Fire a error message\n   * @param {string}    title [description]\n   * @param {string =     null}        body [description]\n   */\n  Toastify.prototype.error = function (title, body) {\n    if (body === void 0) {\n      body = null;\n    }\n    this.levels.error.fire(this.options, title, body);\n  };\n  /**\n   * Fire a default message\n   * @param {string}    title [description]\n   * @param {string =     null}        body [description]\n   */\n  Toastify.prototype.default = function (title, body) {\n    if (body === void 0) {\n      body = null;\n    }\n    return this.levels.default.fire(this.options, title, body);\n  };\n  return Toastify;\n}();\nvar index = new Toastify();\nexport { Toastify };\nexport default index;","map":null,"metadata":{},"sourceType":"module"}